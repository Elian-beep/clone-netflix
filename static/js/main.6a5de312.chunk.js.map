{"version":3,"sources":["Tmdb.js","components/MovieRow.js","components/FeaturedMovie.js","components/Header.js","App.js","index.js"],"names":["API_KEY","basicFetch","endpoint","a","fetch","req","json","getHomeList","slug","title","items","getMovieInfo","movieId","type","info","useState","scrollX","setScrollX","className","onClick","x","Math","round","window","innerWidth","style","fontsize","listW","results","length","marginLeft","width","lenght","map","item","key","src","poster_path","alt","original_title","firstDate","Date","first_air_date","genres","i","push","name","description","overview","substring","backgroundSize","backgroundPosition","backgroundImage","backdrop_path","original_name","vote_average","getFullYear","number_of_seasons","join","black","href","movieList","setMovieList","featuredData","setFeaturedData","blackHeader","setBlackHeader","useEffect","loadAll","Tmdb","list","originals","filter","randomChosen","floor","random","chosen","id","chosenInfo","console","log","scrollListener","scrollY","addEventListener","removeEventListener","role","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6a5de312.chunk.js","sourcesContent":["/* eslint-disable import/no-anonymous-default-export */\r\n//Vai receber todas as informações de requisições\r\nconst API_KEY = 'c3fe35ca9d8af96ad10ad92f0a2cae2a';\r\nconst API_BASE = 'https://api.themoviedb.org/3';\r\n\r\n/*\r\nIrá pegar\r\n    -Originais da Netflix\r\n    -Recomendados (trending)\r\n    -Em alta (top retad)\r\n    -ação\r\n    -comédia\r\n    -terror\r\n    -romance\r\n    -documentários\r\n*/\r\n\r\n//Função auxiliar que irá pegar as informações, retornar o json da url\r\n//endpoint -> url | req -> requisições\r\n//fetch() -> Busca informações e recursos através da rede\r\n//Await -> É executada e faz esperar a resposta de algo para ir pro próximo\r\nconst basicFetch = async (endpoint) => { /*Método que vai buscar os filmes na API*/\r\n    const req = await fetch(`${API_BASE}${endpoint}`)//Fazendo a requisição na rede\r\n    const json = await req.json(); //Aplicando a um json nativo\r\n    return json;\r\n}\r\n\r\nexport default{//Função que possui a base das informações a serem pegadas\r\n    getHomeList: async () => {\r\n        return [\r\n            {\r\n                slug: 'originals',\r\n                title: 'Originais do Netflix',\r\n                items: await basicFetch(`/discover/tv?with_network=213&language=pt-br&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'trending',\r\n                title: 'Recomendados para você',\r\n                items: await basicFetch(`/trending/all/week?language=pt-br&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'toprated',\r\n                title: 'Em alta',\r\n                items: await basicFetch(`/movie/top_rated?language=pt-br&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'action',\r\n                title: 'Ação',\r\n                items: await basicFetch(`/discover/movie?with_genres=28&language=pt-br&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'comedy',\r\n                title: 'Comédia',\r\n                items: await basicFetch(`/discover/movie?with_genres=35&language=pt-br&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'horror',\r\n                title: 'Terror',\r\n                items: await basicFetch(`/discover/movie?with_genres=27&language=pt-br&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'romance',\r\n                title: 'Romance',\r\n                items: await basicFetch(`/discover/movie?with_genres=10749&language=pt-br&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'documentary',\r\n                title: 'Documentário',\r\n                items: await basicFetch(`/discover/movie?with_genres=99&language=pt-br&api_key=${API_KEY}`)\r\n            },\r\n        ];\r\n    },\r\n    //Função específica que irá pegar iformações de um filme específico\r\n    getMovieInfo: async (movieId, type)=>{\r\n        let info = {};\r\n        if(movieId){\r\n            switch(type){\r\n                case 'movie':\r\n                    info = await basicFetch(`movie/${movieId}?language=pt-br&api_key=${API_KEY}`);\r\n                    break;\r\n                case 'tv':\r\n                    info = await basicFetch(`/tv/${movieId}?language=pt-br&api_key=${API_KEY}`);\r\n                    break;\r\n                default:\r\n                    info = null;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return info;\r\n    }\r\n}","import React, { useState } from \"react\";\r\nimport './MovieRow.css';\r\n\r\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';//Import do icone de navegação pra esquerda\r\nimport NavigateNextIcon from '@material-ui/icons//NavigateNext';//Import do icone de navegação para a direita\r\n\r\nexport default ({title, items})=>{ /*Items recebidos do App.js*/\r\n\r\n    const [scrollX, setScrollX] = useState(-400);//Um número dinâmico que começa com o valor 0 relevante ao scroll X da tela\r\n    \r\n    const handleLeftArrow = () => {//Ação que fará a lista se movimentar para a esquerda\r\n        let x = scrollX + Math.round(window.innerWidth / 2); //Valor a ser mandao pro scroll X dependendo do tamanho da tela, metade da tela (para não ser lento e nem rapido)\r\n        if(x>0){//Se o scroll passar de 0\r\n            x = 0;//Retorna pra 0 pois é o limite\r\n        } \r\n        // eslint-disable-next-line\r\n        setScrollX(x);\r\n    }\r\n\r\n    const handleRightArrow = () => {//Ação que fará a lista se movimentar para a direita (Calcular o limite de intes comparado com a tela)\r\n        let x = scrollX - Math.round(window.innerWidth/ 2);//O valor mandado é do 0 até o limite da lista\r\n        let listW = items.results.length * 150;//Largura total dos itens\r\n        if((window.innerWidth - listW) > x){//Se O tamanho da tela menos o total de itens for maior que a posição X\r\n            x = (window.innerWidth - listW) - 60;//Retornar para o limite incluindo o espaçamento do padding da lista\r\n        }\r\n        setScrollX(x);\r\n    }\r\n\r\n    return(\r\n        <div className=\"movieRow\"> {/* Linha principal das listas de filmes */}\r\n            <h2>{title}</h2>\r\n            <div className=\"movieRow--left\" onClick={handleLeftArrow}>{/*Btn de mover a lista de filmes pra esquerda*/}\r\n                <NavigateBeforeIcon style={{fontsize: 50}} />\r\n            </div>\r\n\r\n            <div className=\"movieRow--right\" onClick={handleRightArrow}>{/*Btn de mover a lista de filmes pra direita*/}\r\n                <NavigateNextIcon style={{fontsize: 50}} />\r\n            </div>\r\n\r\n\r\n            <div className=\"movieRow--listarea\"> {/* Area geral individual da lista */}\r\n\r\n                <div className=\"movieRow--list\" style={{\r\n                    marginLeft: scrollX,\r\n                    width: items.results.length * 150\r\n                }}> {/* Area da lista dentro da area geral definida */}\r\n                {items.results.lenght > 0 || items.results.map((item, key)=>( /**/\r\n                    <div key={key} className=\"movieRow--item\">\r\n                        <img src={`https://image.tmdb.org/t/p/w300${item.poster_path}`} alt={item.original_title} />\r\n                    </div>\r\n                ))}\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport './FeaturedMovie.css';\r\n\r\nexport default ({ item }) => {\r\n\r\n    let firstDate = new Date(item.first_air_date);//Atribui a informação da data para uma função JS que manipulça a data\r\n    let genres = [];\r\n    for (let i in item.genres) {//Percorre o json das informações do JSON\r\n        genres.push(item.genres[i].name);//Atribui apenas o nome no araray vazio criado anteriormente\r\n    }\r\n\r\n    let description = item.overview;//Atribuindo a descrição a uma variavel\r\n    if (description.length > 200) {//Se a descrição tiver\r\n        description = description.substring(0, 200) + '...';\r\n    }\r\n\r\n    return (\r\n        <section className=\"featured\" style={{\r\n            backgroundSize: 'cover',\r\n            backgroundPosition: 'center',\r\n            backgroundImage: `url(https://image.tmdb.org/t/p/original${item.backdrop_path})`\r\n        }}>{/*Imagem de fundo*/}\r\n            <div className=\"featured--vertical\">{/*Configuração dos elementos na vertical (degrade vertrical)*/}\r\n                <div className=\"featured--horizontal\">{/*Configuração dos elemenetos na horizontal (degrade horizontal)*/}\r\n                    <div className=\"featured--name\">{item.original_name}</div>\r\n                    <div className=\"featured--info\">\r\n                        <div className=\"featured--points\">{item.vote_average} pontos</div>\r\n                        <div className=\"featured--year\">{firstDate.getFullYear()}</div>\r\n                        <div className=\"featured--seasons\">{item.number_of_seasons} temporada{item.number_of_seasons !== 1 ? 's' : ''}</div>\r\n                    </div>\r\n                    <div className=\"featured--description\">{description}</div>\r\n                    <div className=\"featured--buttons\">\r\n                        <a className=\"featured--watchButton\">► Assistir</a>\r\n                        <a  className=\"featured--mylistButton\">+ Minha Lista</a>\r\n                    </div>\r\n                    <div className=\"fetured--genres\"><strong>Generos: {genres.join(', ')}</strong></div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n\r\n\r\n// href={`/list/add/${item.id}`}\r\n// href={`/watch/${item.id}`}","import React from \"react\";\r\nimport './Header.css';\r\n\r\nexport default ({black}) =>{\r\n    return(\r\n        <header className={black ? 'black': ''} > {/*Se a prop black existir (true), o nome da tag tambem sera black e exibira a formatação css*/}\r\n            <div className=\"header--logo\">\r\n                <a href=\"/\">\r\n                    <img src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\" alt=\"Netflix\" />\r\n                </a>\r\n            </div>\r\n\r\n            <div className=\"header--user\">\r\n                <a href=\"/\">\r\n                    <img src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\" alt=\"Usuário\" />\r\n                </a>\r\n            </div>\r\n        </header>\r\n    );\r\n}","/* eslint-disable import/no-anonymous-default-export */\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Tmdb from './Tmdb';\nimport MovieRow from './components/MovieRow';\nimport FeaturedMovie from './components/FeaturedMovie';\nimport Header from './components/Header';\n\nexport default () => {\n\n  const [movieList, setMovieList] = useState([]); //A lista de filmes sera carregada e armazenada para exibição\n  const [featuredData, setFeaturedData] = useState(null); //O filme em destaque sera carregado (enquanto nao carrega será null) e armazenado para exibição\n  const [blackHeader, setBlackHeader] = useState(false);//O estado inicial da barra preta será nula, desativada no inicio\n\n  useEffect(()=> {\n    const loadAll = async () => {//Vai carregar tudo ao iniciar/recarregar a pagina\n      //Pegando a lista total\n      let list = await Tmdb.getHomeList();//Busca a lista de filmes do banco de dados json\n      setMovieList(list);//Seta a lista encontrada\n\n      //Pegando o featured\n      let originals = list.filter(i=>i.slug === 'originals');//A variavel irá carregar apenas os filmes que o slug(originals) representa\n      let randomChosen = Math.floor(Math.random() * (originals[0].items.results.length - 1)); //A variavel ira representar a escolha aleatoria do filme origianal\n      let chosen = originals[0].items.results[randomChosen];//è feita a escolha\n      let chosenInfo = await Tmdb.getMovieInfo(chosen.id, 'tv');\n      console.log(chosenInfo);\n      setFeaturedData(chosenInfo);\n\n    }\n    loadAll();//Carrega tudo\n  }, []);\n\n  useEffect(()=>{//Função imediata que irá monitora o scroll do mouse\n    const scrollListener = () => {\n      if(window.scrollY > 15){//Quando o scroll vertical começar a aumentar\n        setBlackHeader(true);\n      }else{\n        setBlackHeader(false);\n      }\n    }\n    window.addEventListener('scroll', scrollListener);//Quando houver qualquer evento de rolagem na tela, ele chama a função\n\n    return () => {\n      window.removeEventListener('scroll', scrollListener);//Ao finalizar a função imediata, o monitoramento do scroll acaba\n    }\n  }, []);\n\n  return(\n    <div className=\"page\"> {/* Página inicial */}\n\n      <Header black={blackHeader} />\n\n      {featuredData &&\n        <FeaturedMovie item={featuredData} />\n      }\n\n      <section className='lists'>\n        {movieList.map((item, key)=>( // Listagem e mapeamento de todos os itens encontrados no componente MovieRow\n          <MovieRow key={key} title={item.title} items={item.items} /> //Componente enviando os props a serem usados (titulo e os itens referente a esse titulo)\n          /*Esta sendo passada uma key por ser um loop*/\n        ))}\n      </section>\n\n      <footer>\n        Feito com <span role=\"img\" aria-label=\"coração\">❤</span> pelo Dev ElianBeep\n        Direitos de imagem para Netflix\n        Dados pegados do site: Themoviedb.org\n      </footer>\n\n      {movieList.length <= 0 && \n        <div className=\"loading\">{/*Só deve aparecer enquanto as listas (MovieList) não estiverem prontas*/}\n          <img src=\"https://media.filmelier.com/noticias/br/2020/03/Netflix_LoadTime.gif\" alt=\"Carregando...\" />\n        </div>\n      }\n\n    </div>\n  );\n}\n\n//useEffect -> Quando a tela é carregada ele executa a função de imediato\n//useState -> Salva um estado, a lista de filmes a serem exibidos\n//assync -> Função que espera um resultado\n\n/*Ordem da página\n  Header\n    Destaque\n    As listas\n    Rodapé básico\n*/","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}